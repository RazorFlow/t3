{"name":"t3.js - Testing Single Page Applications","tagline":"Terrific Testing Tool (or t3 for short)","body":"t3.js - Integration Testing for Single Page Apps\r\n================================================\r\n\r\nt3.js (short for \"Terrific Testing Tool\") is a tool to help you preform integration tests Single Page JavaScript applications. It doesn't do any testing by itself, instead can be configured to use any testing framework which supports asynchronous testing. By default, it ships with support for Jasmine testing framework.\r\n\r\n## Why use t3?\r\n\r\nWhile JavaScript testing libraries are generally great for testing unit functions (like Jasmine), it doesn't work great for testing UIs which have heavy DOM involvement. Generally you use tools like Selenium for this, but Selenium doesn't allow you to mix things together and check for things like \"Assert this DOM node has only one child\".\r\n\r\nAs an example, let's consider a Login Form. This form does AJAX validation and displays an error message.\r\n\r\n```\r\n<form id=\"loginForm\">\r\n\t<input type=\"text\" id=\"userName\"/>\r\n\t<input type=\"password\" id=\"userPass\">\r\n\t<button id=\"submitButton\">Login</button>\r\n\t<p id=\"errorMessage\"></p>\r\n</form>\r\n```\r\n\r\nTo test this, we first enter the wrong password and then the correct one. \r\n\r\n### Testing without t3\r\n\r\n```\r\nit(\"Should show error message on wrong password and hide form on successful login\", function (done) {\r\n\t// Set values\r\n\t$(\"#userName\").attr(\"value\", \"user\");\r\n\t$(\"#userPass\").attr(\"value\", \"wrong_password\");\r\n\t$(\"#submitButton\").click();\r\n\tsetTimeout (function () {\r\n\t\texpect($(\"#errorMessage\").text()).toBe(\"Wrong Password\");\r\n\t\t$(\"#userPass\").attr(\"value\", \"correct_password\");\r\n\t\t$(\"#submitButton\").click();\r\n\t\tsetTimeout (function () {\r\n\t\t\texpect($(\"#errorMessage\").text()).toBe(\"\");\r\n\t\t\texpect($(\"#loginForm\").css(\"display\")).toBe(\"none\")\r\n\t\t\tdone ();\r\n\t\t}, 500);\r\n\t}, 500);\r\n});\r\n```\r\n\r\n### Testing with t3\r\n\r\n```\r\nit(\"Should show error message on wrong password and hide form on successful login\", function (done) {\r\n\tt3.start()\r\n\t  .fillForm(\"#userName\", \"user\")\r\n\t  .fillForm(\"#userPass\", \"wrong_password\")\r\n\t  .click(\"#submitButton\")\r\n\t  .wait(500)\r\n\t  .assertText(\"#errorMessage\", \"Wrong Password\")\r\n\t  .fillForm(\"#userPass\", \"correct_password\")\r\n\t  .click(\"#submitButton\")\r\n\t  .wait(500)\r\n\t  .assertText(\"#errorMessage\", \"\")\r\n\t  .assertCSS(\"#loginForm\", \"display\", \"none\")\r\n\t  .finish(done)\r\n});\r\n```\r\n\r\n## How to use it\r\n\r\n\r\nFirst, include jQuery and t3.min.js in your page. Currently only Jasmine is supported. And create an async test.\r\n\r\n```\r\nit(\"Should do something awesome\", function (done) {\r\n\tt3.start()\r\n\t  // All t3 statements come here\r\n\t  .finish(done) // this should be the last statement\r\n});\r\n```\r\n\r\nYou will have to *chain* various statements together to perform actions and checks\r\n\r\n### Understanding t3's Context\r\n\r\nSince t3 is frequently used to test the DOM, and not every item in the DOM has an id or a unique selector, for convenience, t3 always operates on a specific context.\r\n\r\nFor example, if you're making an application and are testing everything rendered into a div called \"renderTarget\", you can just do:\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#renderTarget\")\r\n  // ...\r\n```\r\n\r\nNow when you use a command like\r\n\r\n```\r\n  .assertText(\"p.warning\", \"Please check yo'self\");\r\n```\r\n\r\nIt only checks inside the `#renderTarget`.\r\n\r\n### Using various statements\r\n\r\n#### start\r\n\r\nStarts the chain.\r\n\r\n```\r\nt3.start()\r\n  .finish(done)\r\n```\r\n\r\n#### finish\r\n\r\nFinishes the chain and if no errors are found, marks the test as successful.\r\n\r\n```\r\nt3.start()\r\n  .finish(done)\r\n```\r\n\r\n#### wait\r\n\r\nWaits for some number of milliseconds before continuing to the next step on the chain.\r\n\r\n```\r\nt3.start()\r\n  .wait(2000) // Wait 2 seconds before finishing the test\r\n  .finish(done)\r\n```\r\n\r\n#### debug\r\n\r\nLaunches a JavaScript debugger inside the chain so you can manually examine the context of the DOM. You might want to remove this in production.\r\n\r\n```\r\nt3.start()\r\n  .debug()\r\n  .finish(done)\r\n```\r\n\r\n#### setContext\r\n\r\nAllows you to set the context. You can pass either:\r\n\r\n* A jQuery Selector. This is always selected from the top-level.\r\n* A jQuery object which you've already selected\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#mailBoxRenderer\")\r\n  .finish(done);\r\n```\r\n\r\n#### drillContext\r\n\r\nIf you already have a context, and want to set a new context which is below the current context, you can use ``drillContext``\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#mailBoxRenderer\")\r\n  .drillContext (\"li.mailItem:eq(0)\")\r\n  .finish(done);\r\n```\r\n\r\n#### enterTempContext and exitTempContext\r\n\r\nIf you want to temporarily go into a sub-context div (for example if you're checking a todo list, you go from the full list temporarily into a single item). You can exit this temp context by using `exitTempContext`\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#todoListRenderer\") // context is #todoListRenderer\r\n  .enterTempContext (\"div.todoItem:eq(5)\") // context is #todoListRenderer > div.todoItem:eq(5)\r\n  \t.assert(\".todoName\", \"Throw ring[0] in mordor\")\r\n  .exitTempContext () // context is #todoListRenderer\r\n  .finish(done);\r\n```\r\n\r\n#### trigger\r\n\r\nTrigger an event on an element. (This is still in development)\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#loginForm\")\r\n  .trigger (\"#userName\", \"click\")\r\n  .finish(done);\r\n```\r\n\r\nThere are some shortcut methods for common functions like `.click` which you can use directly\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#loginForm\")\r\n  .click (\"#submitButton\")\r\n  .finish(done);\r\n```\r\n\r\n#### doSync\r\n\r\nExecute some code in the correct step in the chain.\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#loginForm\")\r\n  .doSync (function () {\r\n  \tconsole.log(\"t3 is awesome\");\r\n  })\r\n  .finish(done);\r\n```\r\n\r\n#### doAsync\r\n\r\n```\r\nt3.start()\r\n  .setContext (\"#loginForm\")\r\n  .doAsync(function (contextDiv, _done) {\r\n  \tsetTimeout (function () {\r\n  \t\tconsole.log (\"finished async task\");\r\n  \t\t_done ();\r\n  \t});\r\n  \tconsole.log(\"Starting async task\")\r\n  })\r\n  .doSync (function () {\r\n  \tconsole.log(\"t3 is awesome\");\r\n  })\r\n  .finish(done);\r\n```\r\n\r\nThis will output:\r\n\r\n```\r\nStarting async task\r\nfinished async task\r\nt3 is awesome\r\n```\r\n\r\n#### assert\r\n\r\nThis is the generic assert that you can use to check custom conditions. For example, to check if a todo list has only 5 items after adding 5 items:\r\n\r\n```\r\nt3.start()\r\n  .setContext(\"#todoList > li\")\r\n  .assert(function (contextDiv, success, error) {\r\n  \tif(contextDiv.length == 5) {\r\n  \t\tsuccess ();\r\n  \t}\r\n  \telse {\r\n  \t\terror (\"The number of list items is not 5\");\r\n  \t}\r\n  })\r\n  .finish (done)\r\n```\r\n\r\nThis allows you to exercise full control over all the custom testing features that t3 does not provide, while still benefiting from the async chain.\r\n\r\n#### assertText\r\n\r\nAsserts that the text has a specific value\r\n\r\n```\r\nt3.start ()\r\n  // ...\r\n  .assertText (\"p.warning\", \"Something is not right\")\r\n  .finish(done);\r\n```\r\n\r\n#### assertCSS\r\n\r\nAssert that the CSS values of an element match requirements.\r\n\r\n```\r\nt3.start ()\r\n  // ...\r\n  .assertCSS (\"p.warning\", \"color\", \"red\") // a single condition\r\n  .assertCSS (\"#tooltip\", {\r\n  \t\"display\": \"inline\",\r\n  \t\"float\": \"left\"\r\n  }) // multiple conditions\r\n  .finish(done);\r\n```\r\n\r\n#### assertAttrs\r\n\r\nAssert attibute values of an element match requirements.\r\n\r\n```\r\nt3.start ()\r\n  // ...\r\n  .assertCSS (\"p.warning\", \"data-alert\", \"warning\") // a single condition\r\n  .assertCSS (\"#tooltip\", {\r\n  \t\"class\": \"tooltip\",\r\n  \t\"data-tooltip-content\": \"Hello\"\r\n  }) // multiple conditions\r\n  .finish(done);\r\n```\r\n\r\n#### svgMeasure\r\n\r\nFunction which works with SVG attributes instead of CSS items.\r\n\r\n```\r\nt3.start ()\r\n  .setContext (\"svg\")\r\n  .svgMeasure (\"rect\", \"width\", 42)\r\n  .finish(done);\r\n```\r\n\r\n#### svgTriggerEvent\r\n\r\nFunction which works with SVG elements instead of regular elemtns\r\n\r\n```\r\nt3.start ()\r\n  .setContext (\"svg\")\r\n  .svgTriggerEvent(\"rect\", \"click\")\r\n  .finish(done);\r\n```\r\n\r\n\r\n### Helper functions\r\n\r\nT3 also includes a few special helper functions.\r\n\r\n#### t3.between (start, end)\r\n\r\nChecking for CSS/SVG measurements might have slight variations, and testing them perfectly is hard, so you can provide a range to check the values against.\r\n\r\n```\r\n.assertCSS(\"#todoItem\", \"height\", t3.between(45, 48));\r\n```\r\n\r\n#### t3.approximate (value, tolerance)\r\n\r\nIf you expect a value of, say, 45. But there might be some minor changes, with a maximum deviation of 2.\r\n\r\n```\r\n.assertCSS(\"#todoItem\", \"height\", t3.approximate(45, 2));\r\n```\r\n\r\n## Special features\r\n\r\n#### Check values using a function\r\n\r\nJust about anywhere a value or object is expected, you can pass a function which handles the evaluation. You can also have custom errors.\r\n\r\n```\r\n// For example if your DOM outputs strings which aren't trimmed\r\n// <p class=\"warning\">       This is a warning   </p>\r\nassertText(\"p.warning\", \"This is a warning\"); // would fail\r\n\r\n// you can use\r\nassertText (\"p.warning\", function (value, context) {\r\n\treturn value.trim() == \"This is a warning\";\r\n}); // this passes\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}